@page "/Articles/Manage"

@using ArticleApp.Models

@inject IArticleRepository ArticleRepository

@using Dul.Web
@using Dul.Domain.Common
@using ArticleApp.Pages.Articles.Components

@inject IJSRuntime JSRuntime


<h3>Manage</h3>

<div>
    <a href="/Articles/Create" class="btn btn-outline-primary">Create</a>
</div>

@if (articles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead class="thead-light">
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Created</th>
                <th>&nbsp;</th>
                <th>IsPinned</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in articles)
            {
                <tr>
                    <td>@article.Id</td>
                    <td>@article.Title</td>
                    <td>@article.Created.ToShortTimeString()</td>
                    
                    <td>
                        <a href="/Articles/Details/@article.Id" class="btn btn-light">Details</a>
                        <a href="/Articles/Edit/@article.Id" class="btn btn-light">Edit</a>
                        <a href="/Articles/Delete/@article.Id" class="btn btn-light">Delete</a>
                    </td>
                    <td>@(article.IsPinned ? "공지" : "")</td>
                    <td>
                        <input type="button" value="공지글로 올리기" @onclick="@(()=>PinnedBy(article))" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<ArticlePager Model="pager" PageIndexChanged="PageIndexChanged"></ArticlePager>

@if (isShow == true)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">공지글로 올리기</h5>
                    <button type="button" class="close" @onclick="btnClose_Click">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>@(_article.Id)번 글을 공지글로 설정할까요?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="btnTogglePinned_Click">설정</button>
                    <button type="button" class="btn btn-secondary" @onclick="btnClose_Click">닫기</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    /*  공지 사항 모달 */

    private Article _article = new Article();       // 선택한 항목 관리

    private bool isShow = false;   // ㅜㅐ샻ㄷ ㅡㅐㅇ미

    private void PinnedBy(Article article)
    {
        _article = article;
        isShow = true;
    }

    private void btnClose_Click()
    {
        isShow = false;  // 창 닫기
        _article = new Article();
    }

    private async void btnTogglePinned_Click()
    {
        _article.IsPinned = !_article.IsPinned;  // Toggle
        await ArticleRepository.EditArticleAsync(_article);

        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;        // 총 레코드 수
        articles = pagingData.Records.ToList();             // 페이징 처리된 레코드

        isShow = false; // Modal Close

        StateHasChanged();  // Refresh
    }
    /*  공지 사항 모달 */

    // 페이저 기본값 설정
    private PagerBase pager = new PagerBase()
    {
        PageNumber = 1,
        PageIndex = 0,
        PageSize = 5,
        PagerButtonCount = 10
    };

    private List<Article> articles;

    protected override async Task OnInitializedAsync()
    {
        // articles = await ArticleRepository.GetArticlesAsync();
        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;        // 총 레코드 수
        articles = pagingData.Records.ToList();             // 페이징 처리된 레코드
    }

    // Pager 버튼 클릭 콜백 메서드
    private async void PageIndexChanged(int pageIndex)
    {
        pager.PageIndex = pageIndex;
        pager.PageNumber = pageIndex + 1;

        var pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        articles = pagingData.Records.ToList();

        StateHasChanged();      // 현재 콤포넌트 재로드  리플레쉬
    }

}